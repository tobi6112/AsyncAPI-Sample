# AsyncAPI Spec version
asyncapi: 2.2.0 

# Unique Application Identifier, recommended to use URN
id: 'urn:io:github:the-microservice-dungeon:account'

# Info Object
info:
  # Required
  title: Account Service
  version: 1.0.0 # Should increment with each change, e.g. using SemVer
  # Optional
  description: This service manages user accounts
  # Maybe necessary for the Responsible(s)?
  contact:
    name: Tobi
    email: 22715034+tobi6112@users.noreply.github.com

# Provide a list of active servers where the API can be used
servers:
  production:
    url: kafka.the-microservice-dungeon.github.io
    description: Prod
    protocol: kafka # Where Using Kafka for eventing, so this should be fixed
    protocolVersion: 1.0.0 # Couldn't find the correct version, value taken from AsyncAPI documentation
    # I don't know how kafka is secured and whether the jwt security scheme is appliable to the kafka protocol. This is just a reference
    security: 
      # defined in #/components/securitySchemes/jwt
      - jwt: []

# Globally set the default content type. Used, when content type is omitted in further defined schemas
defaultContentType: application/json 

channels:
  user/signedup:
    # The Application allows Consumers to subscribe to the channel to recieve messages
    description: |
      This channel is used for exchanging events about user registration. 
      Will be fired each time a user signs up
    # It is crucial to understand, that "subscribe" DOES NOT MEAN, that the defined application 
    # subscribes to this event, the application OFFERS a subscription and would therefore PUBLISH
    # weird but ok? Makes sense kinda, even if its unintuitive
    subscribe:
      summary: A user sigend up
      tags:
        - name: user
      message:
        $ref: '#/components/messages/UserSignedUp'
      # We could do some additional protocol bindings here, but i don't think it's really 
      # necessary unless we use a schema registry. Maybe the DevOps Team should be also involved
      bindings:
        kafka:
          groupId:
            type: string
            enum: ['myGroupId']
          clientId:
            type: string
            enum: ['myClientId']
          bindingVersion: '0.2.0'
  user/login:
    description: |
      Used for exchanging events about login state
    subscribe:
      summary: Login State for user updated
      tags:
        - name: user
      message:
        # You can validate against multiple or composed JSON schemes
        # In a real-case scenario you won't define separate UserLoggedIn and UserLoggedOut message objects, 
        # they are only used for illustration purposes on how to compose scheme validation with multiple objects
        oneOf:
          - $ref: '#/components/messages/UserLoggedIn'
          - $ref: '#/components/messages/UserLoggedOut'
  user/{userId}/delete:
    description: |
      User with Id removes his/her account
    # Path Variable
    parameters:
      userId:
        description: User ID
        schema:
          type: string
          format: uuid
    subscribe:
      tags:
        - name: user
      message:
        $ref: '#/components/messages/UserDeleted'
  hello:
    publish:
      tags:
        - name: hello
      message:
        payload:
          type: string
          pattern: '^hello .+$'

components:
  messages:
    UserSignedUp:
      description: Description about the message object.
      payload:
        type: object
        properties:
          displayName:
            type: string
            description: Name of the user
          email:
            type: string
            format: email
            description: Email of the user
      # Not required, but may be extremly nice to have.
      examples:
        - name: SimpleSignup
          summary: A simple UserSignup example message
          payload:
            displayName: tobi6112
            email: 22715034+tobi6112@users.noreply.github.com
      # We could do some additional protocol bindings here, but i don't think it's really 
      # necessary unless we use a schema registry. Maybe the DevOps Team should be also involved
      bindings:
        kafka:
          key:
            type: string
            enum: ['myKey']
          bindingVersion: '0.2.0'
    UserLoggedIn:
      payload:
        type: object
        properties:
          id:
            type: string
            format: uuid
          loginTime:
            type: string
            format: date-time
            description: When the user Logged in
    UserLoggedOut:
      payload:
        type: object
        properties:
          id:
            type: string
            format: uuid
          logoutTime:
            type: string
            format: date-time
            description: When the user Logged out
    UserDeleted:
      payload:
        type: object
        properties:
          deleteTime:
            type: string
            format: date-time
            description: When the user Deleted
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: jwt


tags:
  - name: user
    description: User-related messages
  - name: hello
    description: Hello World